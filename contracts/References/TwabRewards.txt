// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.6;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@pooltogether/v4-core/contracts/interfaces/ITicket.sol";

import "./interfaces/ITwabRewards.sol";

/**
 * @title PoolTogether V4 TwabRewards
 * @author PoolTogether Inc Team
 * @notice Contract to distribute rewards to depositors in a pool.
 * This contract supports the creation of several tournaments that can run simultaneously.
 * In order to calculate user rewards, we use the TWAB (Time-Weighted Average Balance) from the Ticket contract.
 * This way, users simply need to hold their tickets to be eligible to claim rewards.
 * Rewards are calculated based on the average amount of tickets they hold during the epoch duration.
 * @dev This contract supports only one prize pool ticket.
 * @dev This contract does not support the use of fee on transfer tokens.
 */
contract TwabRewards is ITwabRewards {
    using SafeERC20 for IERC20;

    /* ============ Global Variables ============ */

    /// @notice Prize pool ticket for which the tournaments are created.
    ITicket public immutable ticket;

    /// @notice Period during which the tournament owner can't destroy a tournament.
    uint32 public constant GRACE_PERIOD = 60 days;

    /// @notice Settings of each tournament.
    mapping(uint256 => Tournament) internal _tournaments;

    /**
     * @notice Latest recorded tournament id.
     * @dev Starts at 0 and is incremented by 1 for each new tournament. So the first tournament will have id 1, the second 2, etc.
     */
    uint256 internal _latestTournamentId;

    /**
     * @notice Keeps track of claimed rewards per user.
     * @dev _claimedEpochs[tournamentId][user] => claimedEpochs
     * @dev We pack epochs claimed by a user into a uint256. So we can't store more than 256 epochs.
     */
    mapping(uint256 => mapping(address => uint256)) internal _claimedEpochs;

    /* ============ Events ============ */

    /**
     * @notice Emitted when a tournament is created.
     * @param tournamentId Id of the newly created tournament
     */
    event TournamentCreated(uint256 indexed tournamentId);

    /**
     * @notice Emitted when a tournament is ended.
     * @param tournamentId Id of the tournament being ended
     * @param recipient Address of the recipient that will receive the remaining rewards
     * @param amount Amount of tokens transferred to the recipient
     * @param epochNumber Epoch number at which the tournament ended
     */
    event TournamentEnded(
        uint256 indexed tournamentId,
        address indexed recipient,
        uint256 amount,
        uint8 epochNumber
    );

    /**
     * @notice Emitted when a tournament is destroyed.
     * @param tournamentId Id of the tournament being destroyed
     * @param recipient Address of the recipient that will receive the unclaimed rewards
     * @param amount Amount of tokens transferred to the recipient
     */
    event TournamentDestroyed(
        uint256 indexed tournamentId,
        address indexed recipient,
        uint256 amount
    );

    /**
     * @notice Emitted when a tournament is extended.
     * @param tournamentId Id of the tournament being extended
     * @param numberOfEpochs Number of epochs the tournament has been extended by
     */
    event TournamentExtended(uint256 indexed tournamentId, uint256 numberOfEpochs);

    /**
     * @notice Emitted when rewards have been claimed.
     * @param tournamentId Id of the tournament for which epoch rewards were claimed
     * @param epochIds Ids of the epochs being claimed
     * @param user Address of the user for which the rewards were claimed
     * @param amount Amount of tokens transferred to the recipient address
     */
    event RewardsClaimed(
        uint256 indexed tournamentId,
        uint8[] epochIds,
        address indexed user,
        uint256 amount
    );

    /* ============ Constructor ============ */

    /**
     * @notice Constructor of the contract.
     * @param _ticket Prize Pool ticket address for which the tournaments will be created
     */
    constructor(ITicket _ticket) {
        _requireTicket(_ticket);
        ticket = _ticket;
    }

    /* ============ External Functions ============ */

    /// @inheritdoc ITwabRewards
    function createTournament(
        IERC20 _token,
        uint64 _startTimestamp,
        uint256 _tokensPerEpoch,
        uint48 _epochDuration,
        uint8 _numberOfEpochs
    ) external override returns (uint256) {
        require(_tokensPerEpoch > 0, "TwabRewards/tokens-not-zero");
        require(_epochDuration > 0, "TwabRewards/duration-not-zero");
        _requireNumberOfEpochs(_numberOfEpochs);

        uint256 _nextTournamentId = _latestTournamentId + 1;
        _latestTournamentId = _nextTournamentId;

        uint256 _amount = _tokensPerEpoch * _numberOfEpochs;

        _tournaments[_nextTournamentId] = Tournament({
            creator: msg.sender,
            startTimestamp: _startTimestamp,
            numberOfEpochs: _numberOfEpochs,
            epochDuration: _epochDuration,
            createdAt: uint48(block.timestamp),
            token: _token,
            tokensPerEpoch: _tokensPerEpoch,
            rewardsUnclaimed: _amount
        });

        uint256 _beforeBalance = _token.balanceOf(address(this));

        _token.safeTransferFrom(msg.sender, address(this), _amount);

        uint256 _afterBalance = _token.balanceOf(address(this));

        require(_beforeBalance + _amount == _afterBalance, "TwabRewards/promo-amount-diff");

        emit TournamentCreated(_nextTournamentId);

        return _nextTournamentId;
    }

    /// @inheritdoc ITwabRewards
    function endTournament(uint256 _tournamentId, address _to) external override returns (bool) {
        require(_to != address(0), "TwabRewards/payee-not-zero-addr");

        Tournament memory _tournament = _getTournament(_tournamentId);
        _requireTournamentCreator(_tournament);
        _requireTournamentActive(_tournament);

        uint8 _epochNumber = uint8(_getCurrentEpochId(_tournament));
        _tournaments[_tournamentId].numberOfEpochs = _epochNumber;

        uint256 _remainingRewards = _getRemainingRewards(_tournament);
        _tournaments[_tournamentId].rewardsUnclaimed -= _remainingRewards;

        _tournament.token.safeTransfer(_to, _remainingRewards);

        emit TournamentEnded(_tournamentId, _to, _remainingRewards, _epochNumber);

        return true;
    }

    /// @inheritdoc ITwabRewards
    function destroyTournament(uint256 _tournamentId, address _to) external override returns (bool) {
        require(_to != address(0), "TwabRewards/payee-not-zero-addr");

        Tournament memory _tournament = _getTournament(_tournamentId);
        _requireTournamentCreator(_tournament);

        uint256 _tournamentEndTimestamp = _getTournamentEndTimestamp(_tournament);
        uint256 _tournamentCreatedAt = _tournament.createdAt;

        uint256 _gracePeriodEndTimestamp = (
            _tournamentEndTimestamp < _tournamentCreatedAt
                ? _tournamentCreatedAt
                : _tournamentEndTimestamp
        ) + GRACE_PERIOD;

        require(block.timestamp >= _gracePeriodEndTimestamp, "TwabRewards/grace-period-active");

        uint256 _rewardsUnclaimed = _tournament.rewardsUnclaimed;
        delete _tournaments[_tournamentId];

        _tournament.token.safeTransfer(_to, _rewardsUnclaimed);

        emit TournamentDestroyed(_tournamentId, _to, _rewardsUnclaimed);

        return true;
    }

    /// @inheritdoc ITwabRewards
    function extendTournament(uint256 _tournamentId, uint8 _numberOfEpochs)
        external
        override
        returns (bool)
    {
        _requireNumberOfEpochs(_numberOfEpochs);

        Tournament memory _tournament = _getTournament(_tournamentId);
        _requireTournamentActive(_tournament);

        uint8 _currentNumberOfEpochs = _tournament.numberOfEpochs;

        require(
            _numberOfEpochs <= (type(uint8).max - _currentNumberOfEpochs),
            "TwabRewards/epochs-over-limit"
        );

        _tournaments[_tournamentId].numberOfEpochs = _currentNumberOfEpochs + _numberOfEpochs;

        uint256 _amount = _numberOfEpochs * _tournament.tokensPerEpoch;

        _tournaments[_tournamentId].rewardsUnclaimed += _amount;
        _tournament.token.safeTransferFrom(msg.sender, address(this), _amount);

        emit TournamentExtended(_tournamentId, _numberOfEpochs);

        return true;
    }

    /// @inheritdoc ITwabRewards
    function claimRewards(
        address _user,
        uint256 _tournamentId,
        uint8[] calldata _epochIds
    ) external override returns (uint256) {
        Tournament memory _tournament = _getTournament(_tournamentId);

        uint256 _rewardsAmount;
        uint256 _userClaimedEpochs = _claimedEpochs[_tournamentId][_user];
        uint256 _epochIdsLength = _epochIds.length;

        for (uint256 index = 0; index < _epochIdsLength; index++) {
            uint8 _epochId = _epochIds[index];

            require(!_isClaimedEpoch(_userClaimedEpochs, _epochId), "TwabRewards/rewards-claimed");

            _rewardsAmount += _calculateRewardAmount(_user, _tournament, _epochId);
            _userClaimedEpochs = _updateClaimedEpoch(_userClaimedEpochs, _epochId);
        }

        _claimedEpochs[_tournamentId][_user] = _userClaimedEpochs;
        _tournaments[_tournamentId].rewardsUnclaimed -= _rewardsAmount;

        _tournament.token.safeTransfer(_user, _rewardsAmount);

        emit RewardsClaimed(_tournamentId, _epochIds, _user, _rewardsAmount);

        return _rewardsAmount;
    }

    /// @inheritdoc ITwabRewards
    function getTournament(uint256 _tournamentId) external view override returns (Tournament memory) {
        return _getTournament(_tournamentId);
    }

    /// @inheritdoc ITwabRewards
    function getCurrentEpochId(uint256 _tournamentId) external view override returns (uint256) {
        return _getCurrentEpochId(_getTournament(_tournamentId));
    }

    /// @inheritdoc ITwabRewards
    function getRemainingRewards(uint256 _tournamentId) external view override returns (uint256) {
        return _getRemainingRewards(_getTournament(_tournamentId));
    }

    /// @inheritdoc ITwabRewards
    function getRewardsAmount(
        address _user,
        uint256 _tournamentId,
        uint8[] calldata _epochIds
    ) external view override returns (uint256[] memory) {
        Tournament memory _tournament = _getTournament(_tournamentId);

        uint256 _epochIdsLength = _epochIds.length;
        uint256[] memory _rewardsAmount = new uint256[](_epochIdsLength);

        for (uint256 index = 0; index < _epochIdsLength; index++) {
            if (_isClaimedEpoch(_claimedEpochs[_tournamentId][_user], _epochIds[index])) {
                _rewardsAmount[index] = 0;
            } else {
                _rewardsAmount[index] = _calculateRewardAmount(_user, _tournament, _epochIds[index]);
            }
        }

        return _rewardsAmount;
    }

    /* ============ Internal Functions ============ */

    /**
     * @notice Determine if address passed is actually a ticket.
     * @param _ticket Address to check
     */
    function _requireTicket(ITicket _ticket) internal view {
        require(address(_ticket) != address(0), "TwabRewards/ticket-not-zero-addr");

        (bool succeeded, bytes memory data) = address(_ticket).staticcall(
            abi.encodePacked(_ticket.controller.selector)
        );

        require(
            succeeded && data.length > 0 && abi.decode(data, (uint160)) != 0,
            "TwabRewards/invalid-ticket"
        );
    }

    /**
     * @notice Allow a tournament to be created or extended only by a positive number of epochs.
     * @param _numberOfEpochs Number of epochs to check
     */
    function _requireNumberOfEpochs(uint8 _numberOfEpochs) internal pure {
        require(_numberOfEpochs > 0, "TwabRewards/epochs-not-zero");
    }

    /**
     * @notice Determine if a tournament is active.
     * @param _tournament Tournament to check
     */
    function _requireTournamentActive(Tournament memory _tournament) internal view {
        require(
            _getTournamentEndTimestamp(_tournament) > block.timestamp,
            "TwabRewards/tournament-inactive"
        );
    }

    /**
     * @notice Determine if msg.sender is the tournament creator.
     * @param _tournament Tournament to check
     */
    function _requireTournamentCreator(Tournament memory _tournament) internal view {
        require(msg.sender == _tournament.creator, "TwabRewards/only-promo-creator");
    }

    /**
     * @notice Get settings for a specific tournament.
     * @dev Will revert if the tournament does not exist.
     * @param _tournamentId Tournament id to get settings for
     * @return Tournament settings
     */
    function _getTournament(uint256 _tournamentId) internal view returns (Tournament memory) {
        Tournament memory _tournament = _tournaments[_tournamentId];
        require(_tournament.creator != address(0), "TwabRewards/invalid-tournament");
        return _tournament;
    }

    /**
     * @notice Compute tournament end timestamp.
     * @param _tournament Tournament to compute end timestamp for
     * @return Tournament end timestamp
     */
    function _getTournamentEndTimestamp(Tournament memory _tournament)
        internal
        pure
        returns (uint256)
    {
        unchecked {
            return
                _tournament.startTimestamp + (_tournament.epochDuration * _tournament.numberOfEpochs);
        }
    }

    /**
     * @notice Get the current epoch id of a tournament.
     * @dev Epoch ids and their boolean values are tightly packed and stored in a uint256, so epoch id starts at 0.
     * @dev We return the current epoch id if the tournament has not ended.
     * If the current timestamp is before the tournament start timestamp, we return 0.
     * Otherwise, we return the epoch id at the current timestamp. This could be greater than the number of epochs of the tournament.
     * @param _tournament Tournament to get current epoch for
     * @return Epoch id
     */
    function _getCurrentEpochId(Tournament memory _tournament) internal view returns (uint256) {
        uint256 _currentEpochId;

        if (block.timestamp > _tournament.startTimestamp) {
            unchecked {
                _currentEpochId =
                    (block.timestamp - _tournament.startTimestamp) /
                    _tournament.epochDuration;
            }
        }

        return _currentEpochId;
    }

    /**
     * @notice Get reward amount for a specific user.
     * @dev Rewards can only be calculated once the epoch is over.
     * @dev Will revert if `_epochId` is over the total number of epochs or if epoch is not over.
     * @dev Will return 0 if the user average balance of tickets is 0.
     * @param _user User to get reward amount for
     * @param _tournament Tournament from which the epoch is
     * @param _epochId Epoch id to get reward amount for
     * @return Reward amount
     */
    function _calculateRewardAmount(
        address _user,
        Tournament memory _tournament,
        uint8 _epochId
    ) internal view returns (uint256) {
        uint64 _epochDuration = _tournament.epochDuration;
        uint64 _epochStartTimestamp = _tournament.startTimestamp + (_epochDuration * _epochId);
        uint64 _epochEndTimestamp = _epochStartTimestamp + _epochDuration;

        require(block.timestamp >= _epochEndTimestamp, "TwabRewards/epoch-not-over");
        require(_epochId < _tournament.numberOfEpochs, "TwabRewards/invalid-epoch-id");

        uint256 _averageBalance = ticket.getAverageBalanceBetween(
            _user,
            _epochStartTimestamp,
            _epochEndTimestamp
        );

        if (_averageBalance > 0) {
            uint64[] memory _epochStartTimestamps = new uint64[](1);
            _epochStartTimestamps[0] = _epochStartTimestamp;

            uint64[] memory _epochEndTimestamps = new uint64[](1);
            _epochEndTimestamps[0] = _epochEndTimestamp;

            uint256 _averageTotalSupply = ticket.getAverageTotalSuppliesBetween(
                _epochStartTimestamps,
                _epochEndTimestamps
            )[0];

            return (_tournament.tokensPerEpoch * _averageBalance) / _averageTotalSupply;
        }

        return 0;
    }

    /**
     * @notice Get the total amount of tokens left to be rewarded.
     * @param _tournament Tournament to get the total amount of tokens left to be rewarded for
     * @return Amount of tokens left to be rewarded
     */
    function _getRemainingRewards(Tournament memory _tournament) internal view returns (uint256) {
        if (block.timestamp > _getTournamentEndTimestamp(_tournament)) {
            return 0;
        }

        return
            _tournament.tokensPerEpoch *
            (_tournament.numberOfEpochs - _getCurrentEpochId(_tournament));
    }

    /**
    * @notice Set boolean value for a specific epoch.
    * @dev Bits are stored in a uint256 from right to left.
        Let's take the example of the following 8 bits word. 0110 0011
        To set the boolean value to 1 for the epoch id 2, we need to create a mask by shifting 1 to the left by 2 bits.
        We get: 0000 0001 << 2 = 0000 0100
        We then OR the mask with the word to set the value.
        We get: 0110 0011 | 0000 0100 = 0110 0111
    * @param _userClaimedEpochs Tightly packed epoch ids with their boolean values
    * @param _epochId Id of the epoch to set the boolean for
    * @return Tightly packed epoch ids with the newly boolean value set
    */
    function _updateClaimedEpoch(uint256 _userClaimedEpochs, uint8 _epochId)
        internal
        pure
        returns (uint256)
    {
        return _userClaimedEpochs | (uint256(1) << _epochId);
    }

    /**
    * @notice Check if rewards of an epoch for a given tournament have already been claimed by the user.
    * @dev Bits are stored in a uint256 from right to left.
        Let's take the example of the following 8 bits word. 0110 0111
        To retrieve the boolean value for the epoch id 2, we need to shift the word to the right by 2 bits.
        We get: 0110 0111 >> 2 = 0001 1001
        We then get the value of the last bit by masking with 1.
        We get: 0001 1001 & 0000 0001 = 0000 0001 = 1
        We then return the boolean value true since the last bit is 1.
    * @param _userClaimedEpochs Record of epochs already claimed by the user
    * @param _epochId Epoch id to check
    * @return true if the rewards have already been claimed for the given epoch, false otherwise
     */
    function _isClaimedEpoch(uint256 _userClaimedEpochs, uint8 _epochId)
        internal
        pure
        returns (bool)
    {
        return (_userClaimedEpochs >> _epochId) & uint256(1) == 1;
    }
}